name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  fetch_tex_files:
    name: Fetch Tex Files in root directory
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      matrix: ${{ steps.fetch_tex_files.outputs.tex_files }}
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Fetch .tex file names
        id: fetch_tex_files
        run: |
          tex_files=$(find . -maxdepth 1 -name "*.tex" -printf '"%f",')
          tex_files="[${tex_files%,}]"
          tex_files=$(echo "$tex_files" | jq -c .)
          echo "tex_files=$tex_files" >> $GITHUB_OUTPUT

  build_latex:
    name: Build and Release LaTeX as PDF
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fetch_tex_files
    strategy:
      matrix:
        files: ${{ fromJson(needs.fetch_tex_files.outputs.matrix) }}
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ matrix.files }}

      - name: Convert Filename
        id: convert_filename
        run: |
          tex_file="${{ matrix.files }}"
          name_file="${tex_file%.tex}"
          pdf_file="${name_file}.pdf"
          echo "name_file=$name_file" >> $GITHUB_ENV
          echo "pdf_file=$pdf_file" >> $GITHUB_ENV

      - name: Upload PDF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name_file }}
          path: ${{ env.pdf_file }}

  release:
    name: Release all PDFs
    runs-on: ubuntu-latest
    needs: build_latex
    permissions:
      contents: read
      actions: read
    steps:
      # TODO: check if this step is actually needed
      - name: Check Out
        uses: actions/checkout@v4

      - name: Get Last Release Tag
        id: get_last_release
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

          echo  "Last release tag: $LATEST_TAG"

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.0.0"
          else
            # Extract version number and increment
            VERSION=$(echo "$LATEST_TAG" | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1 \2 \3/')
            MAJOR=$(echo $VERSION | cut -d' ' -f1)
            MINOR=$(echo $VERSION | cut -d' ' -f2)
            PATCH=$(echo $VERSION | cut -d' ' -f3)

            PATCH=$((PATCH + 1))  # Increment patch version
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Next release tag: $NEW_TAG"

      - name: Get Artifacts from Current Run
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq '[.artifacts[] | {name, id}]' > artifacts.json

          cat artifacts.json
          ls -latr

      - name: Download Artifacts from Current Run
        run: |
          mkdir -p artifacts

          # Debug: Show raw base64 lines
          echo "Base64-encoded artifacts:"
          jq -c '.[] | @base64' artifacts.json | tee /dev/stderr

          jq -c '.[] | @base64' artifacts.json | while IFS= read -r i; do
              # Ensure line is non-empty and valid base64
              if [[ -n "$i" ]] && echo "$i" | base64 --decode &>/dev/null; then
                  ID=$(echo "$i" | base64 --decode | jq -r '.id')
                  NAME=$(echo "$i" | base64 --decode | jq -r '.name')

                  if [[ -n "$ID" && -n "$NAME" ]]; then
                      echo "Downloading artifact: $NAME ($ID)"
                      curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ID}/zip" \
                          --output "artifacts/${NAME}.zip"
                  else
                      echo "Skipping artifact with missing name or ID"
                  fi
              else
                  echo "Skipping invalid base64 line: '$i'"
              fi
          done

          ls -latr artifacts/

      - name: Extract Artifacts
        run: |
          mkdir -p extracted_artifacts
          for file in artifacts/*.zip; do
            unzip -o "$file" -d extracted_artifacts
          done
          ls -latr extracted_artifacts/

      - name: List Extracted PDFs
        id: list_pdfs
        run: |
          find extracted_artifacts -name "*.pdf" > pdf_list.txt
          cat pdf_list.txt
          echo "pdf_files=$(cat pdf_list.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Create GitHub Release with PDFs
        uses: ncipollo/release-action@v1
        with:
          tag: "v1.0.${{ github.run_number }}"
          artifacts: ${{ env.pdf_files }}
          token: ${{ secrets.GITHUB_TOKEN }}
