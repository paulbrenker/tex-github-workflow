name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  fetch_tex_files:
    name: Fetch Tex Files in root directory
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      matrix: ${{ steps.convert_filename.outputs.tex_files }}
    steps:
      - name: Convert Filename
        id: convert_filename
        run: |
          tex_files=$(ls ./*.tex | jq -R . | jq -s .)
          echo "tex_files=$tex_files" >> $GITHUB_ENV

  build_latex:
    name: Build and Release LaTeX as PDF
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fetch_tex_files
    strategy:
      matrix:
        files: ${{ fromJson(needs.fetch_tex_files.outputs.matrix) }}
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ matrix.files }}

      - name: Convert Filename
        id: convert_filename
        run: |
          tex_file="${{ matrix.files }}"
          name_file="${tex_file%.tex}"
          pdf_file="${name_file}.pdf"
          echo "name_file=$name_file" >> $GITHUB_ENV
          echo "pdf_file=$pdf_file" >> $GITHUB_ENV

      - name: Upload PDF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name_file }}
          path: ${{ env.pdf_file }}

  release:
    name: Release all PDFs
    runs-on: ubuntu-latest
    needs: build_latex
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Get Last Release Tag
        id: get_last_release
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.0.0"
          else
            # Extract version number and increment
            VERSION=$(echo "$LATEST_TAG" | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1 \2 \3/')
            MAJOR=$(echo $VERSION | cut -d' ' -f1)
            MINOR=$(echo $VERSION | cut -d' ' -f2)
            PATCH=$(echo $VERSION | cut -d' ' -f3)

            PATCH=$((PATCH + 1))  # Increment patch version
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Next release tag: $NEW_TAG"

      - name: Get Artifacts from Current Run
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" | jq '.artifacts[] | {name, id}' > artifacts.json

      - name: Download Artifacts from Current Run
        run: |
          mkdir -p artifacts
          cat artifacts.json | jq -c '. | @base64' | while read i; do
            _jq() { echo ${i} | base64 --decode | jq -r ${1}; }
            ID=$(_jq '.id')
            NAME=$(_jq '.name')
            echo "Downloading artifact: $NAME ($ID)"
            curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID/zip" \
                 --output artifacts/$NAME.zip
          done

      - name: Extract Artifacts
        run: |
          mkdir -p extracted_artifacts
          for file in artifacts/*.zip; do
            unzip -o "$file" -d extracted_artifacts
          done

      - name: List Extracted PDFs
        id: list_pdfs
        run: |
          find extracted_artifacts -name "*.pdf" > pdf_list.txt
          cat pdf_list.txt
          echo "pdf_files=$(cat pdf_list.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Create GitHub Release with PDFs
        uses: ncipollo/release-action@v1
        with:
          tag: "v1.0.${{ github.run_number }}"
          artifacts: ${{ env.pdf_files }}
          token: ${{ secrets.GITHUB_TOKEN }}
