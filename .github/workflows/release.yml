name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      workflow_dispatch_bump:
        description: "Version type to increment (minor, major)"
        required: true
        default: "minor"

jobs:
  fetch_tex_files:
    name: Fetch Tex Files in root directory
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      matrix: ${{ steps.fetch_tex_files.outputs.tex_files }}
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Fetch .tex file names
        id: fetch_tex_files
        run: |
          tex_files=$(find . -maxdepth 1 -name "*.tex" -printf '"%f",')
          tex_files="[${tex_files%,}]"
          tex_files=$(echo "$tex_files" | jq -c .)
          echo "tex_files=$tex_files" >> $GITHUB_OUTPUT

  build_latex:
    name: Build and Release LaTeX as PDF
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fetch_tex_files
    strategy:
      matrix:
        files: ${{ fromJson(needs.fetch_tex_files.outputs.matrix) }}
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ matrix.files }}

      - name: Convert Filename
        id: convert_filename
        run: |
          tex_file="${{ matrix.files }}"
          name_file="${tex_file%.tex}"
          pdf_file="${name_file}.pdf"
          echo "name_file=$name_file" >> $GITHUB_ENV
          echo "pdf_file=$pdf_file" >> $GITHUB_ENV

      - name: Upload PDF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name_file }}
          path: ${{ env.pdf_file }}

  release:
    name: Release all PDFs
    runs-on: ubuntu-latest
    needs: build_latex
    permissions:
      contents: write
      actions: read
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PR Number
        run: |
          PR_NUMBER=$(git log -1 --pretty=format:%s | grep -oP '#\d+' | tr -d '#')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Get PR Labels
        if: env.PR_NUMBER != ''
        run: |
          PR_LABELS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | jq -r '.labels[].name')
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV

      - name: Get PR Bump Type
        run: |
          if [[ "$PR_LABELS" == *"major-version"* ]]; then
            echo "PR_LABEL_BUMP=major" >> "$GITHUB_ENV"
          elif [[ "$PR_LABELS" == *"minor-version"* ]]; then
            echo "PR_LABEL_BUMP=minor" >> "$GITHUB_ENV"
          else
            echo "PR_LABEL_BUMP=patch" >> "$GITHUB_ENV"
          fi

      - name: Set Release Tag
        id: set_release_tag
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

          echo "Last release tag: $LATEST_TAG"

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.0.0"
          else
            VERSION=$(echo "$LATEST_TAG" | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1 \2 \3/')
            MAJOR=$(echo $VERSION | cut -d' ' -f1)
            MINOR=$(echo $VERSION | cut -d' ' -f2)
            PATCH=$(echo $VERSION | cut -d' ' -f3)

            WORKFLOW_DISPATCH_BUMP="${{ github.event.inputs.workflow_dispatch_bump || 'patch' }}"

            if [[ "$WORKFLOW_DISPATCH_BUMP" == "major" || "${PR_LABEL_BUMP}" == "major" ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [[ "$WORKFLOW_DISPATCH_BUMP" == "minor" || "${PR_LABEL_BUMP}" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi

            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Get Action Artifacts
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq '[.artifacts[] | {name, id}]' > artifacts.json

      - name: Download Action Artifacts
        run: |
          mkdir -p artifacts

          jq -c '.[]' artifacts.json | while IFS= read -r i; do
              echo "Processing: $i"
              ID=$(echo "$i" | jq -r '.id')
              NAME=$(echo "$i" | jq -r '.name')

              echo "Decoded ID: '$ID', Name: '$NAME'"

              if [[ -n "$ID" && -n "$NAME" ]]; then
                  echo "Downloading artifact: $NAME ($ID)"
                  curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ID}/zip" \
                      --output "artifacts/${NAME}.zip"
              else
                  echo "Skipping artifact with missing name or ID"
              fi

          done

      - name: Extract Action Artifacts
        run: |
          mkdir -p extracted_artifacts
          for file in artifacts/*.zip; do
            unzip -o "$file" -d extracted_artifacts
          done

      - name: List Extracted PDFs
        id: list_pdfs
        run: |
          find extracted_artifacts -name "*.pdf" > pdf_list.txt
          cat pdf_list.txt
          echo "pdf_files=$(cat pdf_list.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: "Release ${{ env.NEW_TAG }}"
          files: |
            ${{ env.pdf_files }}

  build_pages:
    name: Build Pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@2a7b30092b0caf9c046252510f9273b4875f3db9
        with:
          ruby-version: "3.1"
          bundler-cache: true
          cache-version: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install Jekyll and dependencies
        run: |
          cd .github/pages
          bundle install

      - name: Build with Jekyll
        run: |
          cd .github/pages
          bundle exec jekyll build
        env:
          JEKYLL_ENV: production
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAGES_REPO_NWO: ${{ github.repository }}

      - name: Deploy to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .github/pages/_site

  deploy_pages:
    name: Deploy Pages
    needs: build_pages
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
